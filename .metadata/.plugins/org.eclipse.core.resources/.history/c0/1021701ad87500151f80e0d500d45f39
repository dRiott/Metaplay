package com.thoughtriott.metaplay.controllers;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import org.springframework.stereotype.Controller;
import org.springframework.validation.Errors;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.SessionAttributes;

import com.thoughtriott.metaplay.data.entities.Album;
import com.thoughtriott.metaplay.data.entities.Artist;
import com.thoughtriott.metaplay.data.entities.RecordLabel;
import com.thoughtriott.metaplay.data.entities.Track;
import com.thoughtriott.metaplay.data.wrappers.AmazonService;
import com.thoughtriott.metaplay.data.wrappers.CreateAlbumWrapper;
import com.thoughtriott.metaplay.data.wrappers.CreateTrackWrapper;

@Controller
@RequestMapping("/album")
@SessionAttributes("createAlbumWrapper")
public class AlbumController extends AmazonService {

	@RequestMapping("/add")
	public String addAlbum(){
		return "album_add";
	}
	
	@RequestMapping("/review")
	public String review(HttpSession session, @Valid @ModelAttribute CreateAlbumWrapper createAlbumWrapper, Errors errors) {
		System.out.println("AlbumController: invoking review() ");
		if(errors.hasErrors()) {
			return "album_add";
		}
		session.setAttribute("createAlbumWrapper", createAlbumWrapper);
		return "album_review";
	}
	
	@RequestMapping("/save")
	public String saveAlbum(@Valid @ModelAttribute CreateAlbumWrapper caw, Errors errors) {
		// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ BEGIN ALBUM PERSISTENCE ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		System.out.println("\n ************************************ \nAlbumController: invoking saveAlbum()");
		Album futureAlbum = new Album();

		if(caw.getName().isEmpty()) {
			futureAlbum = (albumRepository.findAlbumByName(caw.getAlbumFromList()).get(0));
			System.out.println("AlbumController: setName() - \"" + caw.getAlbumFromList() + "\"");
		} else {
			futureAlbum.setName(caw.getName());
			System.out.println("AlbumController: setName() - \"" + caw.getName() + "\"");
		}
		
		if(caw.getAlbumCover()!=null) {
			super.saveImage(caw.getAlbumCover(), ALBUM, caw.getName());
		}
		
		futureAlbum.setLengthMinSec(caw.getLengthMinutes(), caw.getLengthSeconds());
		futureAlbum.setReleaseDate(dateFormatter.getDateFromString(caw.getReleaseDate()));
		
		// ****************** BEGIN TRACK PERSISTENCE ******************
		Map<Integer, String> tracksMap = new HashMap<Integer, String>();
		
		List<CreateTrackWrapper> createTrackWrappers = caw.getCreateTrackWrappers();
		Iterator<CreateTrackWrapper> it = createTrackWrappers.iterator();
		int numTracksCounter=0;
		while(it.hasNext()) {
			CreateTrackWrapper ctw = it.next();
			if(!ctw.getName().isEmpty()){
				System.out.println("Track name: " + ctw.getName());
				System.out.println("AlbumController: while(createTrackWrappersList.hasNext()) - About to add the track to the album...");
				if (trackRepository.findTrackByName(ctw.getName()).size()>0) {
					System.out.println("AlbumController: while(createTrackWrappersList.hasNext()) - Found the track already in the DB: " + ctw.getName());
					Track foundTrack = trackRepository.findTrackByName(ctw.getName()).get(0);
					if(ctw.getLengthMinutes()!=0 & ctw.getLengthSeconds()!=0) {
						foundTrack.setLengthMinSec(ctw.getLengthMinutes(), ctw.getLengthSeconds());
					}
					if(ctw.getBpm()!=0) {
						foundTrack.setBpm(ctw.getBpm());
					}
					saveAudioFile(ctw.getMp3(), ""+foundTrack.getId(), foundTrack.getName());
					futureAlbum.addTrack(foundTrack);
				} else {
					System.out.println("AlbumController: while(createTrackWrappersList.hasNext()) - No track found in the DB. Creating one...");
					Track newTrack = new Track();
					if(ctw.getLengthMinutes()!=0 & ctw.getLengthSeconds()!=0) {
						newTrack.setLengthMinSec(ctw.getLengthMinutes(), ctw.getLengthSeconds());
					}
					numTracksCounter++;
					System.out.println("AlbumController: while(createTrackWrappersList.hasNext()) - About to setTrackNumber: " + numTracksCounter);
					newTrack.setTrackNumber(numTracksCounter);
					newTrack.setName(ctw.getName());
					newTrack.setBpm(ctw.getBpm());
					System.out.println("AlbumController: while(createTrackWrappersList.hasNext()) -  **** Hey, I've got this Track: " + newTrack.toString());
					
					Track persistedTrack = trackRepository.saveAndFlush(newTrack);
					if(ctw.getMp3()!=null) {
						saveAudioFile(ctw.getMp3(), ""+persistedTrack.getId(), persistedTrack.getName());
					}
					futureAlbum.addTrack(persistedTrack);
					//adding Tracks to Map<Integer, String> tracksMap
					tracksMap.put(newTrack.getLength(), newTrack.getName());
					System.out.println("AlbumController: while(createTrackWrappersList.hasNext()) - ******** Done with this Track: " + newTrack.getName() + " ********" );
				}
			}
		}
		System.out.println("Total tracks: " + numTracksCounter);
		futureAlbum.setNumTracks(numTracksCounter);
		// ****************** END TRACK PERSISTENCE ******************	
		
		// ****************** BEGIN ARTIST PERSISTENCE ******************	
		System.out.println("AlbumController: Setting/Creating an Artist");
		if(caw.getArtistFromList()!="** New Artist **" && artistRepository.findArtistByName(caw.getArtistFromList())!=null) {
			System.out.println("AlbumController: setting Artist - Found the artist already in the DB: " + caw.getArtistFromList());
			futureAlbum.setArtist(artistRepository.findArtistByName(caw.getArtistFromList()));
		} else {
			//Creating a new Artist...
			Artist a = new Artist();
			a.setName(caw.getTheNewArtist());
			System.out.println("AlbumController: setting Artist -  Artist didn't exist in the DB. A new one is about to be created: " + a.toString());
			futureAlbum.setArtist(artistRepository.saveAndFlush(a));
		}
		// ****************** END ARTIST PERSISTENCE ******************
		
		// ****************** BEGIN RECORD LABEL PERSISTENCE ******************
		System.out.println("AlbumController: Setting/Creating a Record Label");
		String recordLabelName = caw.getRecordLabelFromList();
		String recordLabelCity = caw.getRecordLabelCity();
		String recordLabelState = caw.getRecordLabelState();
		if(recordLabelName!="** New Record Label **" && recordLabelRepository.findRecordLabelByName(recordLabelName).size()>0) {
			futureAlbum.setRecordLabel(recordLabelRepository.findRecordLabelByName(recordLabelName).get(0));
		} else if(recordLabelName.equals("** New Record Label **")) {
			String newRecordLabelName = caw.getTheNewRecordLabel();
			RecordLabel rl = (RecordLabel) recordLabelRepository.saveAndFlush(new RecordLabel(newRecordLabelName, locationRepository.findLocationByCityAndState(recordLabelCity, recordLabelState)));
			futureAlbum.setRecordLabel(rl);
		}
		// ****************** END RECORD LABEL PERSISTENCE ******************
		
		System.out.println("AlbumController: final step - Creating the Album");
		Album persistedAlbum = albumRepository.saveAndFlush(futureAlbum);
		// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ END ALBUM PERSISTENCE ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		

		// ****************** BEGIN TRACK SET ALBUM TO NEW ALBUM ******************
		Iterator<Map.Entry<Integer, String>> trackEntries = tracksMap.entrySet().iterator();
		while (trackEntries.hasNext()) {
		    Map.Entry<Integer, String> trackEntry = trackEntries.next();
		    Track trackToUpdate = trackRepository.findTrackByNameAndLength(trackEntry.getValue(), trackEntry.getKey()).get(0);
		    trackToUpdate.setAlbum(persistedAlbum);
		    trackRepository.saveAndFlush(trackToUpdate);
		}
		// ****************** END TRACK SET ALBUM TO NEW ALBUM ******************

		return "redirect:/album/add";
	}
	
	@RequestMapping("/find")
	public String findAlbum(){
		return "404";
	}
	

	//Model Attributes ----------------------------------------
	
	@ModelAttribute("createAlbumWrapper")
	public CreateAlbumWrapper getCreateAlbumWrapper() {
		return new CreateAlbumWrapper();
	}
	
	@ModelAttribute(value="artistOptions")
	public List<String> getArtists() {
		return  artistRepository.findAllToListString();
	}
	
	@ModelAttribute(value="albumOptions")
	public List<String> getAlbums() {
		return  albumRepository.findAllToListString();
	}
	
	@ModelAttribute(value="recordLabelOptions")
	public List<String> getRecordLabels() {
		return  recordLabelRepository.findAllAsListString();
	}
	
	@ModelAttribute("recordLabelStateOptions")
	public List<String> getTypes () {
		return new LinkedList<>(Arrays.asList(new String[] { 
		"Alabama", "Alaska", "Arizona", "Arkansas", "California", "Colorado","Connecticut", 
		"Delaware", "District Of Columbia", "Florida", "Georgia", "Hawaii", "Idaho", "Illinois", "Indiana",
		"Iowa", "Kansas", "Kentucky", "Louisiana", "Maine", "Maryland", "Massachusetts", "Michigan", "Minnesota",
		"Mississippi", "Missouri", "Montana Nebraska", "Nevada", "New Hampshire", "New Jersey", "New Mexico", "New York",
		"North Carolina", "North Dakota", "Ohio", "Oklahoma", "Oregon", "Pennsylvania","Rhode Island","South Carolina",
		"South Dakota","Tennessee","Texas","Utah","Vermont","Virginia","Washington", "West Virginia", "Wisconsin", "Wyoming"
		}));
	}	
	
}
