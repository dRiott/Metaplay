package com.thoughtriott.metaplay.controllers;

import java.io.IOException;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.multipart.MultipartFile;

import com.thoughtriott.metaplay.data.documents.AudioFile;
import com.thoughtriott.metaplay.data.repositories.jpa.AlbumRepository;
import com.thoughtriott.metaplay.data.repositories.jpa.ArtistRepository;
import com.thoughtriott.metaplay.data.repositories.jpa.TrackRepository;
import com.thoughtriott.metaplay.data.repositories.mongo.AudioFileRepository;
import com.thoughtriott.metaplay.data.wrappers.CreateTrackWrapper;

@Controller
@RequestMapping("/mongo")
public class MongoController {

	@Autowired
	ArtistRepository artistRepository;
	@Autowired
	AlbumRepository albumRepository;
	@Autowired
	TrackRepository trackRepository;
	@Autowired
	AudioFileRepository afrepo;
	
	@RequestMapping(value="/upload", method=RequestMethod.GET)
	public String getUploadPage(){
		return "upload_mp3";
	}
	@RequestMapping(value="/audio", method=RequestMethod.GET)
	public String getAudio(){
		return "audio";
	}
	
	
	@RequestMapping(value="/upload", method=RequestMethod.POST)
	public String saveTrack(@ModelAttribute CreateTrackWrapper ctw) {
		System.out.println("Invoking the saveTrack() from TrackController.");
		AudioFile futureMP3 = new AudioFile();
		System.out.println("got the ctw");
//
//		Track futureTrack = new Track();
//
//		futureTrack.setName(ctw.getName());
//		futureMP3.setName(ctw.getName());
//
//		futureTrack.setLengthMinSec(ctw.getLengthMinutes(), ctw.getLengthSeconds());
//		futureMP3.setLengthMinSec(ctw.getLengthMinutes(), ctw.getLengthSeconds());
//		
//		futureTrack.setLyrics(ctw.getLyrics());
//		futureMP3.setLyrics(ctw.getLyrics());
//		
//		futureTrack.setBpm(ctw.getBpm());
//		futureMP3.setBpm(ctw.getBpm());
//		
//		futureTrack.setTrackNumber(ctw.getTrackNumber());
//		futureMP3.setTrackNumber(ctw.getTrackNumber());
//		
//		System.out.println("Setting/Creating an Album");
//		
//		if(!ctw.getAlbumFromList().equals("** New Album **") && !ctw.getAlbumFromList().equals("** Do Not Add Album Now **") && albumRepository.findAlbumByName(ctw.getAlbumFromList())!=null) {
//			System.out.println("Hmm, inside the first if");
//			futureTrack.setAlbum(albumRepository.findAlbumByName(ctw.getAlbumFromList()).get(0));
//			futureMP3.setAlbumName(ctw.getAlbumFromList());
//		} else if (ctw.getAlbumFromList().equals("** New Album **")){
//				Album newAlbum = new Album();
//				newAlbum.setName(ctw.getTheNewAlbum());
//				//to create a new album, an artist isn't necessary... but if it does exist, add the artist to the album.
//				if(ctw.getArtistFromList()!="** New Artist **" && artistRepository.findArtistByName(ctw.getArtistFromList())!=null) {
//					newAlbum.setArtist(artistRepository.findArtistByName(ctw.getArtistFromList()));
//				} else if(ctw.getArtistFromList().equals("** New Artist **")) {
//					newAlbum.setArtist(artistRepository.saveAndFlush(new Artist(ctw.getTheNewArtist())));
//				}
//				futureTrack.setAlbum(albumRepository.saveAndFlush(newAlbum));
//				futureMP3.setAlbumName(ctw.getTheNewAlbum());
//		}
//		
//		System.out.println("Creating the Track");
//		Track flushedTrack = trackRepository.saveAndFlush(futureTrack);
//		int id = flushedTrack.getId();
		
		int id = 2;
		MultipartFile mp3 = ctw.getMp3();
		System.out.println("Got the mp3");
		try {
			System.out.println("Inside the try");
			byte[] bytes = mp3.getBytes();
			futureMP3.setId(id);
			futureMP3.setMp3(bytes);
			System.out.println("Set the mp3, about to save");
			afrepo.save(futureMP3);
			System.out.println("Saved with afrepo");
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		return "redirect:/track/add";
	}
	
	// ------------------------------ Model Attributes ------------------------------
		@ModelAttribute("createTrackWrapper")
		public CreateTrackWrapper getCreateTrackWrapper() {
			return new CreateTrackWrapper();
		}
		
		@ModelAttribute(value="artistOptions")
		public List<String> getArtists() {
			return  artistRepository.findAllToListString();
		}
		
		@ModelAttribute(value="albumOptions")
		public List<String> getAlbums() {
			return  albumRepository.findAllToListString();
		}
		
}
