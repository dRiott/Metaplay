package com.thoughtriott.metaplay.data.wrappers;

import java.io.ByteArrayInputStream;
import java.io.InputStream;

import javax.servlet.http.HttpServletResponse;

import org.apache.commons.io.IOUtils;
import org.jets3t.service.S3Service;
import org.jets3t.service.acl.AccessControlList;
import org.jets3t.service.acl.GroupGrantee;
import org.jets3t.service.acl.Permission;
import org.jets3t.service.impl.rest.httpclient.RestS3Service;
import org.jets3t.service.model.S3Bucket;
import org.jets3t.service.model.S3Object;
import org.jets3t.service.security.AWSCredentials;
import org.jets3t.service.security.ProviderCredentials;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.multipart.MultipartFile;

import com.amazonaws.auth.BasicAWSCredentials;
import com.amazonaws.services.s3.AmazonS3Client;
import com.amazonaws.services.s3.model.AmazonS3Exception;
import com.amazonaws.services.s3.model.ObjectMetadata;
import com.amazonaws.services.s3.model.PutObjectRequest;

@Controller
public class AmazonService {

		static final String SUFFIX = "/";
		protected static final String PROFILEPICS = "profilePictures";
		static final String BUCKETNAME = "metaplaypictures";
		static final String AWS_KEY = "AKIAIBWGLPRG2FMCGDKA";
		static final String AWS_SECRET_KEY = "IvqMfT32WLjJ+OacA0e6tU6WEQjkX/OU0+f+g4VE";
	
	//Utility method for uploading an image to S3, see: http://www.jets3t.org/toolkit/code-samples.html#downloading
	@RequestMapping(value = "/saveimage")
	protected void saveImage(MultipartFile image, String foldername, String filename) {
		try {
			AWSCredentials awsCredentials = new AWSCredentials(AWS_KEY, AWS_SECRET_KEY);	
			
			S3Service s3 = new RestS3Service((ProviderCredentials) awsCredentials);
			S3Bucket bucket = s3.getBucket(BUCKETNAME);
			System.out.println("Got the bucket: " + bucket);
			
			S3Object imageObject = new S3Object(foldername + SUFFIX + filename);
			imageObject.setDataInputStream(image.getInputStream());
			imageObject.setContentLength(image.getSize());
			imageObject.setContentType(image.getContentType());
			AccessControlList acl = new AccessControlList();
			acl.setOwner(bucket.getOwner());
			acl.grantPermission(GroupGrantee.ALL_USERS, Permission.PERMISSION_READ);
			imageObject.setAcl(acl);
			s3.putObject(bucket, imageObject);
		} catch(Exception e) {
			System.out.println(e.getMessage());
			throw new AmazonS3Exception(e.getMessage());
		}
	}
	//Utility method for getting an image from S3, see: http://www.jets3t.org/toolkit/code-samples.html#downloading

	protected HttpServletResponse getImage(String folderName, String fileName, HttpServletResponse response) {
		try {
			AWSCredentials awsCredentials = new AWSCredentials(AWS_KEY, AWS_SECRET_KEY);
			S3Service s3 = new RestS3Service((ProviderCredentials) awsCredentials);
			S3Object objectComplete = s3.getObject(BUCKETNAME, folderName+SUFFIX+fileName);
			    response.setContentType("image/jpeg, image/jpg, image/png, image/gif");
			    byte[] bytes = IOUtils.toByteArray(objectComplete.getDataInputStream());
				response.getOutputStream().write(bytes);
				response.getOutputStream().close();
				return response;
		} catch (Exception e) {
			throw new AmazonS3Exception(e.getMessage());
		}
	}
	
	//creating an S3 folder to store pictures
	public static void createFolder(String folderName) {
		try {	
			com.amazonaws.auth.AWSCredentials awsCred = new BasicAWSCredentials(AWS_KEY, AWS_SECRET_KEY);
			AmazonS3Client s3client = new AmazonS3Client(awsCred);	
			com.amazonaws.services.s3.model.S3Object objectComplete = s3client.getObject(BUCKETNAME, folderName+SUFFIX);
			if(objectComplete==null) {
				ObjectMetadata metadata = new ObjectMetadata();
				metadata.setContentLength(0);
				InputStream emptyContent = new ByteArrayInputStream(new byte[0]);
				PutObjectRequest putObjectRequest = new PutObjectRequest(BUCKETNAME, folderName + SUFFIX, emptyContent, metadata);
				s3client.putObject(putObjectRequest);
				emptyContent.close();
			} else {
				System.out.println("folder name: " + objectComplete.getKey());
				System.out.println("Folder already existed.. not creating a copy.");
			}
			
		} catch (Exception e) {
			throw new AmazonS3Exception(e.getMessage());
		}
	}
}
