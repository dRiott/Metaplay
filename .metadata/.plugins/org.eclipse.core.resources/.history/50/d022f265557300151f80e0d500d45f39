package com.thoughtriott.metaplay.controllers;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.thoughtriott.metaplay.data.entities.Account;
import com.thoughtriott.metaplay.data.entities.Album;
import com.thoughtriott.metaplay.data.entities.Artist;
import com.thoughtriott.metaplay.data.entities.Genre;
import com.thoughtriott.metaplay.data.entities.Location;
import com.thoughtriott.metaplay.data.entities.Member;
import com.thoughtriott.metaplay.data.entities.Playlist;
import com.thoughtriott.metaplay.data.entities.RecordLabel;
import com.thoughtriott.metaplay.data.entities.Role;
import com.thoughtriott.metaplay.data.entities.Track;
import com.thoughtriott.metaplay.data.repositories.jpa.AccountRepository;
import com.thoughtriott.metaplay.data.repositories.jpa.AlbumRepository;
import com.thoughtriott.metaplay.data.repositories.jpa.ArtistRepository;
import com.thoughtriott.metaplay.data.repositories.jpa.GenreRepository;
import com.thoughtriott.metaplay.data.repositories.jpa.LocationRepository;
import com.thoughtriott.metaplay.data.repositories.jpa.MemberRepository;
import com.thoughtriott.metaplay.data.repositories.jpa.PlaylistRepository;
import com.thoughtriott.metaplay.data.repositories.jpa.RecordLabelRepository;
import com.thoughtriott.metaplay.data.repositories.jpa.RoleRepository;
import com.thoughtriott.metaplay.data.repositories.jpa.TrackRepository;
import com.thoughtriott.metaplay.errors.MetaplayNotFoundException;

@RestController
@RequestMapping("/rest")
public class RestSearchController {

	//private static final String DEFAULT_ARTIST = "Animal Collective";
	
	@Autowired
	AccountRepository accountRepository;
	@Autowired
	AlbumRepository albumRepository;
	@Autowired
	ArtistRepository artistRepository;
	@Autowired
	GenreRepository genreRepository;
	@Autowired
	LocationRepository locationRepository;
	@Autowired
	MemberRepository memberRepository;
	@Autowired
	PlaylistRepository playlistRepository;
	@Autowired
	RecordLabelRepository recordLabelRepository;
	@Autowired
	RoleRepository roleRepository;
	@Autowired
	TrackRepository trackRepository;
	
//	public static final String[] TYPES = {"account", "album", "artist", "genre", "location", "member", "playlist", "recordLabel", "role", "track"};
	
	@RequestMapping(value="/artist", method=RequestMethod.GET)
	public Artist artists() {
		return artistRepository.findAll().get(0);
	}
	
	@RequestMapping(value="/artist", method=RequestMethod.POST, consumes="application/json")
	public List<Artist> findArtistLike(@RequestParam("query") String query) {
//		System.out.println("query is : " + query);
		String dbQuery = query+"%";
		List<Artist> artists = artistRepository.findArtistByNameLike(dbQuery);
//		if(artists!=null) {
//			System.out.println("Hard-coded album's name: " + artists.get(0).getName());
//		} else {
//			System.out.println("came back null");
//		}
		return artists;
	}
	
	@RequestMapping(value="/random", method=RequestMethod.POST, consumes="application/json")
	public Object findRandomLike() {
		List<Object> globalList = new ArrayList<>();

		List<Account> accounts = accountRepository.findAll();
		List<Album> albums = albumRepository.findAll();
		List<Artist> artists = artistRepository.findAll();
		List<Genre> genres = genreRepository.findAll();
		List<Location> locations = locationRepository.findAll();
		List<Member> members = memberRepository.findAll();
		List<Playlist> playlists = playlistRepository.findAll();
		List<RecordLabel> recordLabels = recordLabelRepository.findAll();
		List<Role> roles = roleRepository.findAll();
		List<Track> tracks = trackRepository.findAll();
		
		globalList.add(accounts);
		globalList.add(albums);
		globalList.add(artists);
		globalList.add(genres);
		globalList.add(locations);
		globalList.add(members);
		globalList.add(artists);
		globalList.add(playlists);
		globalList.add(recordLabels);
		globalList.add(roles);
		globalList.add(tracks);
		
		globalList.
		
//		if(artists!=null) {
//			System.out.println("Hard-coded album's name: " + artists.get(0).getName());
//		} else {
//			System.out.println("came back null");
//		}
		return globalList.get(0);
	}

	@RequestMapping(value="/artist/{id}", method=RequestMethod.GET)
	public @ResponseBody Artist artistById(@PathVariable Integer id) {
		Artist artist = artistRepository.getOne(id);
		if(artist == null) {
			throw new MetaplayNotFoundException(id);
		}
		return artist;
	}
	
	//working with ResponseEntity to carry metadata in addition to the object
		/*@RequestMapping(value="/{id}", method=RequestMethod.GET)
		public ResponseEntity<Artist> artistByIdWithMetadata(@PathVariable Integer id) {
			Artist artist = artistRepository.getOne(id);
			HttpStatus status = artist != null ? HttpStatus.OK : HttpStatus.NOT_FOUND;
			return new ResponseEntity<Artist> (artist, status);
		}*/
}
