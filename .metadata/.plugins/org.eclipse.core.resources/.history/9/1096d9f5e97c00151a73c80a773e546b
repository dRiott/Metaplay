/**
 *  Configures the sortable, draggable, and selectable tracks. Sends ajax call on submit button click to save playlist.
 */

$(document).ready(function () {
	
	//BEGIN NORMAL PAGE MANIPULATION STUFF
	//set up the tables to be sortable, and connect them for dropping
	$("#tracksTable tbody").sortable({
		connectWith: "#playlistTable tbody"
	});
	
	$("#playlistTable tbody").sortable({
		connectWith: "#tracksTable tbody"
	});
	
	//set up each tr so that when it's grabbed, it doesn't scrunch its tds.
	$('td, th', '#tracksTable').each(function () {
        var cell = $(this);
        cell.width(cell.width());
    });
	
	$('td, th', '#playlistTable').each(function () {
		var cell = $(this);
		cell.width(cell.width());
	});

	//grab the width of the tr and set the th accordingly. workaround for scrollable tbodies that are sortable/draggable.
	$('.tdWidth').each(function(index) {
	    $("#playlistTHeadTh" + index).css("width", 1.1*$(this).width());
	    $("#trackTHeadTh" + index).css("width", 1.1*$(this).width());
	    if (index > 2) {
	    	return false;
	    }
	});
	//end NORMAL PAGE MANIPULATION STUFF.
		
	
	
	//sends ajax call to save the playlist
	$("#playlistSubmitButton").click(function(e) {
		var tracksInfo = [];
		var tracksStringified = "";
		
		e.preventDefault();
		$(document.body).css({'cursor' : 'wait'});
		console.log("You clicked the submit button!");
		
		$("#playlistTable tbody tr").each(function (index) {
			index+=1;
//			console.log("Playlist_Track number: " + index);
//			console.log("Track ID: " + $(this).children(":first").text());
			console.log($(this).attr("trackId"));
			tracksInfo.push({trackNumber: index, trackId: $(this).attr("trackId")});
		});
		
		tracksStringified = JSON.stringify(tracksInfo);
		console.log("Stringified tracksInfo data: " + tracksStringified);
		
		
		if (tracksStringified!==null) {
			
			$.ajax({
				headers: { 
			        'Accept': 'application/json',
			        'Content-Type': 'application/json' 
			    },
				url: '/metaplay/playlist/save',
				type: 'POST',
				dataType: 'json',
				data: tracksStringified,
				success: playlistSuccess,
				error: playlistError
			});
			
		} else {
			console.log("The tracksInfo array was empty. Did not ajax call.");
		}

	}); //end save playlist ajax call (button on click event);
	
	//autocomplete for the accounts search input
	$("#accountSearchInput").autocomplete({
		source: '/metaplay/playlist/accountsearch',
		minLength: 2,
		delay: 1000,
		select: function(event, ui) {
			console.log("hmm");
			console.log($("#accountsTable tbody").length);
			if($("#accountsTable tbody tr").each().length===1) {
				$("#accountsTable tbody").append("<tr><td>hey</td></tr>");
			} else {
				$("#accountsTable tbody tr").append("<td>hey2</td>");
			}
		}
	}); //end account search autocomplete
	

	$("#playlistSubmitButton").hover(tintWindow, untintWindow);
	
}); // end document.ready

	
function playlistSuccess() {
	$(document.body).css({'cursor' : 'default'});
	$("#messageDiv").html("Playlist created successfully.").show(1000);
	$("#playlistTable tbody tr").remove();
}

function playlistError(returnedData, status) {
	$(document.body).css({'cursor' : 'default'});
	console.log("ERROR:Fail to save the playlist via REST, Data: " + returnedData);
	console.log("ERROR:Fail to save the playlist via REST, Status: " + status)
}

function tintWindow() {
	$("div").not(":contains(Description)").not(":contains(Playlist)").css({"opacity": ".5", "-webkit-filter" : "blur(2px)"});
}

function untintWindow() {
	$("div").not("#playlistSubmitButton").css({"opacity": "1", "-webkit-filter" : "grayscale(0%)"});
}


